CREATE SCHEMA PD_INTEL.ORDER_BASE
COMMENT = 'Consists of Base table, Functions and SPs';

CREATE SCHEMA PD_INTEL.ORDER_XFRM
COMMENT = 'Contains of Views for Xfrm';

CREATE SCHEMA PD_INTEL.ORDER_ANALYSIS
COMMENT = 'Consumption View for Outside App';*/

/CREATE OR REPLACE TABLE ORDER_BASE.T_SALES_ORDER_HEADER (	
    ORDER_ID	VARCHAR(10),
    ORDER_DATE	DATE,
    STATUS	VARCHAR(10),
    CUSTOMER_ID	VARCHAR(10),
    ITEM_COUNT	INT,
    TOTAL_AMOUNT	NUMBER(12,2),
    DISCOUNT	NUMBER(10,2),
    FINAL_INVOICE_AMT NUMBER(12,2),
    COUPON_CODE VARCHAR(20),
    CREATE_DATE	DATE,
    CREATE_USER	VARCHAR(10)
)

CREATE or replace TABLE ORDER_BASE.T_SALES_ORDER_DETAIL 
(	
    ORDER_ID	VARCHAR(10),
    ORDER_DATE	DATE,
    CUSTOMER_ID	VARCHAR(10),
    ITEM_ID	VARCHAR(10),
    QTY	INT,
    TOTAL_AMOUNT	NUMBER(12,2),
       CREATE_DATE	DATE,
    CREATE_USER	VARCHAR(10),
     PRICE number(12,2));

CREATE OR REPLACE TABLE ORDER_BASE.T_CUSTOMER 
(	
    CUSTOMER_ID	VARCHAR(10),
    ADDRESS	VARCHAR(50),
    PHONE_NO	VARCHAR(10),
    CATEGORY	VARCHAR(10),
    STATUS	VARCHAR(10),
    TOTAL_ORDERS	INTEGER,
    TOTAL_INVOICE_AMOUNT	NUMBER(12,2),
    LOYALTY_POINTS	NUMBER(12,2),
    CREATE_DATE	DATE,
    CREATE_USER	VARCHAR(10)
);

CREATE TABLE ORDER_BASE.T_PROMOTION 
(	
    PROMOTION_ID	VARCHAR(10),
CUSTOMER_CATEGORY	VARCHAR(10),
PROMOTION_TYPE	VARCHAR(10),
PROMOTION_VALUE	NUMBER(10,2),
COMMENT	VARCHAR(20)
);

CREATE OR REPLACE TABLE ORDER_BASE.T_INVOICE 
(	
ORDER_ID	VARCHAR(10),
ORDER_DATE	DATE,
INVOICE_DATE	DATE,
TAX_AMOUNT	NUMBER(10,2),
TOTAL_AMOUNT	NUMBER(12,2),
DISCOUNT	NUMBER(10,2),
FINAL_INVOICE_AMT	NUMBER(12,2),
CUSTOMER_ID VARCHAR(10),
CREATE_DATE	DATE,
CREATE_USER	VARCHAR(10));*/
CREATE VIEW V_SALES_ORDER_HEADER AS
SELECT 
    o.ORDER_ID, 
    o.ORDER_DATE, 
    o.STATUS, 
    o.CUSTOMER_ID, 
    o.ITEM_COUNT, 
    o.TOTAL_AMOUNT, 
    o.DISCOUNT, 
    (o.TOTAL_AMOUNT - o.DISCOUNT) AS FINAL_INVOICE_AMT
FROM 
    ORDER_BASE.T_SALES_ORDER_HEADER o
JOIN 
    ORDER_BASE.T_CUSTOMER c ON o.CUSTOMER_ID = c.CUSTOMER_ID
WHERE 
    o.STATUS = 'Active';
    
    
 CREATE or REPLACE VIEW V_SALES_ORDER_HEADER AS
SELECT 
    o.ORDER_ID, 
    o.ORDER_DATE, 
    o.STATUS, 
    o.CUSTOMER_ID, 
    o.ITEM_COUNT, 
    o.TOTAL_AMOUNT, 
    o.DISCOUNT, 
    (o.TOTAL_AMOUNT - o.DISCOUNT) AS FINAL_INVOICE_AMT
FROM 
    ORDER_BASE.T_SALES_ORDER_HEADER o
JOIN 
    ORDER_BASE.T_CUSTOMER c ON o.CUSTOMER_ID = c.CUSTOMER_ID
WHERE 
    o.STATUS = 'Active';

CREATE or replace VIEW V_SALES_ORDER_DETAIL AS
SELECT 
    ORDER_ID,
    ORDER_DATE,
    CUSTOMER_ID,
    ITEM_ID,
    QTY,
    TOTAL_AMOUNT
FROM 
    ORDER_BASE.T_SALES_ORDER_DETAIL;
    
    CREATE or replace VIEW V_CUSTOMER AS
SELECT 
    c.CUSTOMER_ID,
    c.ADDRESS,
    c.PHONE_NO,
    c.CATEGORY,
    c.STATUS,
    COALESCE(o.TOTAL_ORDERS, 0) AS TOTAL_ORDERS,
    COALESCE(o.TOTAL_INVOICE_AMOUNT, 0) AS TOTAL_INVOICE_AMOUNT,
    c.LOYALTY_POINTS
FROM 
    ORDER_BASE.T_CUSTOMER c
LEFT JOIN (
    SELECT 
        CUSTOMER_ID,
        COUNT(ORDER_ID) AS TOTAL_ORDERS,
        SUM(FINAL_INVOICE_AMT) AS TOTAL_INVOICE_AMOUNT
    FROM 
        ORDER_BASE.T_SALES_ORDER_HEADER
    GROUP BY 
        CUSTOMER_ID
) o ON c.CUSTOMER_ID = o.CUSTOMER_ID;

CREATE OR REPLACE VIEW V_PROMOTION AS
SELECT 
    PROMOTION_ID,
    CUSTOMER_CATEGORY,
    PROMOTION_TYPE,
    PROMOTION_VALUE,
    COMMENT
FROM 
    ORDER_BASE.T_PROMOTION;
    
CREATE OR REPLACE TABLE T_INVOICE 
(
ORDER_ID	VARCHAR(10),
ORDER_DATE	DATE,
INVOICE_DATE	DATE,
TAX_AMOUNT	NUMBER(10,2),
TOTAL_AMOUNT	NUMBER(12,2),
DISCOUNT	NUMBER(10,2),
FINAL_INVOICE_AMT	NUMBER(12,2),
CUSTOMER_ID	VARCHAR(10),
CREATE_DATE	DATE,
CREATE_USER	VARCHAR(10));

CREATE OR REPLACE VIEW V_PROMOTION AS
SELECT
    soh.ORDER_ID,
    soh.ORDER_DATE,
    soh.CUSTOMER_ID,
    P.CUSTOMER_CATEGORY,
    soh.TOTAL_AMOUNT,
    p.PROMOTION_TYPE,
    CASE 
        WHEN p.PROMOTION_TYPE = 'Discount' THEN soh.TOTAL_AMOUNT * (p.PROMOTION_VALUE / 100)
        WHEN p.PROMOTION_TYPE = 'Coupon_X' THEN soh.TOTAL_AMOUNT * p.PROMOTION_VALUE
        WHEN p.PROMOTION_TYPE = 'Coupon_Y' THEN soh.TOTAL_AMOUNT * p.PROMOTION_VALUE
        WHEN p.PROMOTION_TYPE = 'Coupon_Z' THEN soh.TOTAL_AMOUNT * p.PROMOTION_VALUE
        ELSE 0
    END AS PROMOTION_VALUE,
    (soh.TOTAL_AMOUNT - 
    CASE 
        WHEN p.PROMOTION_TYPE = 'Discount' THEN soh.TOTAL_AMOUNT * (p.PROMOTION_VALUE / 100)
        WHEN p.PROMOTION_TYPE LIKE 'Coupon%' THEN soh.TOTAL_AMOUNT * p.PROMOTION_VALUE
        ELSE 0
    END) AS FINAL_AMOUNT,
    p.comment
FROM 
    ORDER_BASE.T_SALES_ORDER_HEADER soh
JOIN 
    ORDER_BASE.T_CUSTOMER c ON soh.CUSTOMER_ID = c.CUSTOMER_ID
  left JOIN 
    ORDER_BASE.T_PROMOTION p ON c.CATEGORY = p.CUSTOMER_CATEGORY
WHERE 
    soh.ORDER_DATE > CURRENT_DATE 
    AND c.STATUS = 'Active';

